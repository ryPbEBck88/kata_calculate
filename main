package main

import (
	"bufio"
	"errors"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func input() string {
	scanner := bufio.NewScanner(os.Stdin)
	_ = scanner.Scan()
	s := scanner.Text()
	return s
}

func calculator(a int, b int, symbol string) int {
	switch symbol {
	case "+":
		return a + b
	case "-":
		return a - b
	case "*":
		return a * b
	case "/":
		return a / b
	}
	return 0
}

func dict_roman(s string) string {
	var m = map[string]string{
		"0":   "",
		"1":   "I",
		"2":   "II",
		"3":   "III",
		"4":   "IV",
		"5":   "V",
		"6":   "VI",
		"7":   "VII",
		"8":   "VIII",
		"9":   "IX",
		"10":  "X",
		"20":  "XX",
		"30":  "XXX",
		"40":  "XL",
		"50":  "L",
		"60":  "LX",
		"70":  "LXX",
		"80":  "LXXX",
		"90":  "XC",
		"100": "C",
	}
	return m[s]
}

func system_of_calculation(s string) (int, string) {
	for i := 1; i < 11; i++ {
		t := strconv.Itoa(i)
		if dict_roman(t) == s {
			return i, "roman"
		} else if t == s {
			return i, "arab"
		}
	}
	return 0, ""
}

func main() {
	notMathErr := errors.New("Не является математической операцией")
	notCorrespondErr := errors.New("Введите два операнда и один оператор(+, -, *, /")
	negativeRoman := errors.New("В римской системе нет отрицательных чисел")
	differentSystemsErr := errors.New("Разные системы исчисления")
	numberLimitErr := errors.New("Введите, пожалуйста, арабские(от 1 до 10) или римские(от I до X) цифры")
	var firstNum, secondNum int
	var firstNumSystem, secondNumSystem string
	line := input()                 // ввод данных как в питоне
	lst := strings.Split(line, " ") // преобразуем в список

	// проверяем на длину
	if len(lst) == 1 {
		fmt.Print(notMathErr)
		os.Exit(0)
	} else if len(lst) != 3 {
		fmt.Println(notCorrespondErr)
		os.Exit(0)
	}

	// проверяем оператор
	if lst[1] != "+" && lst[1] != "-" && lst[1] != "*" && lst[1] != "/" {
		fmt.Println(notCorrespondErr)
		os.Exit(0)
	}

	// проверяем, являются первое и второе число арабскими
	firstNum, firstNumSystem = system_of_calculation(lst[0])
	secondNum, secondNumSystem = system_of_calculation(lst[2])

	arabRomanBool := firstNumSystem == "arab" && secondNumSystem == "roman"
	romanArabBool := firstNumSystem == "roman" && secondNumSystem == "arab"

	// вывод калькуляции арабских чисел
	if firstNumSystem == "arab" && secondNumSystem == "arab" {
		fmt.Println(calculator(firstNum, secondNum, lst[1]))

		// вывод калькуляции римских чисел
	} else if firstNumSystem == "roman" && secondNumSystem == "roman" {

		num := calculator(firstNum, secondNum, lst[1])
		hundreds := strconv.Itoa(num / 100 * 100)
		tens := strconv.Itoa(num / 10 % 10 * 10)
		units := strconv.Itoa(num % 10)
		numRoman := dict_roman(hundreds) + dict_roman(tens) + dict_roman(units)
		if numRoman == "" {
			fmt.Println(negativeRoman)
		} else {
			fmt.Println(numRoman)
		}

		// разные системы исчисления
	} else if arabRomanBool || romanArabBool {
		fmt.Println(differentSystemsErr)
	} else {
		fmt.Println(numberLimitErr)
	}
}
